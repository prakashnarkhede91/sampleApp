{"version":3,"sources":["reducers/uiReducer.js","actions/snackbarActions.js","ChatRatingComponent.js","NotificaitonsSnackbar.js","ChatComponent.js","App.js","reportWebVitals.js","index.js"],"names":["uiReducer","state","action","type","notificationsSnackbarOpen","notificationsSnackbarMessage","message","showSnackbar","dispatch","ChatRatingComponent","botId","activityId","children","useDispatch","useReducer","newState","feedbackState","isOpened","setState","handleVote","isPositive","submitFeedback","then","reacted","url","process","model","messageId","fetch","method","headers","body","JSON","stringify","res","json","result","success","handleInput","event","target","value","shouldBeHidden","stateToMatch","className","hidden","IconButton","onClick","Icon","style","fontSize","marginTop","marginLeft","open","contentStyle","width","height","modal","onChange","NotificationsSnackbar","useSelector","handleClose","Snackbar","anchorOrigin","vertical","horizontal","onClose","id","color","ChatComponent","useParams","systemName","React","useState","directLine","setDirectLine","error","setError","username","setUsername","styleSet","createStyleSet","bubbleBackground","bubbleFromUserBackground","sendBoxButtonColor","sendBoxButtonColorOnFocus","sendBoxButtonColorOnHover","sendBoxBackground","useEffect","credentials","settings","data","createDirectLine","token","botToken","errorMessage","console","log","store","createStore","next","payload","name","language","window","navigator","activityMiddleware","setupArgs","card","activity","from","role","src","App","applyMiddleware","thunk","basename","path","exact","component","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50e98aa8.chunk.js","sourcesContent":["const uiReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n      case \"SNACKBAR_NOTIFICATION\":\r\n        return {\r\n          ...state,\r\n          notificationsSnackbarOpen: true,\r\n          notificationsSnackbarMessage: action.message\r\n        };\r\n      case \"SNACKBAR_CLEAR\":\r\n        return {\r\n          ...state,\r\n          notificationsSnackbarOpen: false,\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default uiReducer;","export const showSnackbar = message => {\r\n    return dispatch => {\r\n      dispatch({ type: \"SNACKBAR_NOTIFICATION\", message });\r\n    };\r\n  };\r\n  \r\n  export const clearSnackbar = () => {\r\n    return dispatch => {\r\n      dispatch({ type: \"SNACKBAR_CLEAR\" });\r\n    };\r\n  };","import React, { useReducer } from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport 'reactjs-popup/dist/index.css';\r\nimport { useDispatch } from 'react-redux'\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { Icon } from \"@material-ui/core\";\r\n\r\nimport { showSnackbar } from './actions/snackbarActions'\r\n\r\nconst ChatRatingComponent = ({ botId, activityId, children }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [state, setState] = useReducer(\r\n    (state, newState) => ({...state,...newState}), \r\n    { feedbackState: 'waiting', message: '', isOpened: false }\r\n  )\r\n\r\n  const handleVote = (isPositive) => {\r\n    setState({feedbackState: 'processing'});\r\n    setState({isOpened: false});\r\n    submitFeedback(isPositive).then((reacted) => {\r\n      debugger;\r\n      if (reacted) {\r\n        setState({feedbackState: 'completed'});\r\n      } else {\r\n        dispatch(showSnackbar('Something\\'s gone wrong...'));\r\n        setState({feedbackState: 'waiting'});\r\n      }\r\n    });\r\n  };\r\n\r\n  const submitFeedback = async (isPositive) => {\r\n    const url = `${process.env.REACT_APP_API_BASE_URL}v1/feedback/`;\r\n    const model = {\r\n      botId: botId,\r\n      messageId: activityId,\r\n      isPositive: isPositive,\r\n      message: state.message\r\n    };\r\n    const res = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n          'Content-Type': 'application/json',\r\n          'apiKey': process.env.REACT_APP_API_KEY\r\n      },\r\n      body: JSON.stringify(model)\r\n    });\r\n\r\n    const result = await res.json();\r\n\r\n    return result.success;\r\n  };\r\n\r\n  const handleInput = (event) => {\r\n    setState({message: event.target.value});\r\n  };\r\n\r\n  const shouldBeHidden = (stateToMatch) => {\r\n    if (state.feedbackState === stateToMatch) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  return (\r\n    <div className=\"botActivityDecorator\">\r\n      <ul hidden={shouldBeHidden('waiting')} className=\"botActivityDecorator__buttonBar\">\r\n        <li>\r\n          <IconButton className=\"botActivityDecorator__button\" onClick={() => { handleVote(true); }}>\r\n            <Icon style={{ fontSize: 16 }}>thumb_up</Icon>\r\n          </IconButton>\r\n        </li>\r\n        <li>\r\n          <IconButton className=\"botActivityDecorator__button\" onClick={() => { setState({isOpened: true}); }}>\r\n            <Icon style={{ fontSize: 16 }}>thumb_down</Icon>\r\n          </IconButton>\r\n        </li>\r\n      </ul>\r\n      <ul hidden={shouldBeHidden('processing')} className=\"botActivityDecorator__buttonBar\">\r\n        <li>\r\n          <Icon style={{ fontSize: 16, marginTop: 15, marginLeft: 5 }}>hourglass_full</Icon>\r\n        </li>\r\n      </ul>\r\n      <ul hidden={shouldBeHidden('completed')} className=\"botActivityDecorator__buttonBar\">\r\n        <li>\r\n          <Icon style={{ fontSize: 16, marginTop: 15, marginLeft: 5 }}>done_all</Icon>\r\n        </li>\r\n      </ul>\r\n      <div className=\"botActivityDecorator__content\">{children}</div>\r\n      <Popup open={state.isOpened} contentStyle={{width: '250px', height: '150px'}} modal>\r\n        {() => (\r\n          <div className='feedbackModal'>\r\n            <div>Please provide feedback to help us improve ABBE:</div>\r\n            <div>\r\n              <textarea onChange={handleInput}></textarea>\r\n            </div>\r\n            <button onClick={() => { handleVote(false); }}>Submit</button>\r\n            <button onClick={() => { setState({isOpened: false}); }}>Close</button>\r\n          </div>\r\n        )}\r\n      </Popup>\r\n    </div>    \r\n  );\r\n};\r\n\r\nexport default ChatRatingComponent;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { Icon } from \"@material-ui/core\";\r\nimport { clearSnackbar } from \"./actions/snackbarActions\";\r\n\r\nexport default function NotificationsSnackbar() {\r\n    const dispatch = useDispatch();\r\n\r\n    const { notificationsSnackbarMessage, notificationsSnackbarOpen } = useSelector(\r\n        state => state\r\n    );\r\n\r\n    function handleClose() {\r\n        dispatch(clearSnackbar());\r\n    }\r\n\r\n    return (\r\n        <Snackbar\r\n        anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"center\"\r\n        }}\r\n        open={notificationsSnackbarOpen}\r\n        onClose={handleClose}\r\n        aria-describedby=\"client-snackbar\"\r\n        message={\r\n            <span id=\"client-snackbar\">\r\n                {notificationsSnackbarMessage}\r\n            </span>\r\n        }\r\n        action={[\r\n            <IconButton\r\n            key=\"close\"\r\n            aria-label=\"close\"\r\n            color=\"inherit\"\r\n            onClick={handleClose}>\r\n                <Icon>close</Icon>\r\n            </IconButton>\r\n        ]}\r\n        />\r\n    );\r\n}","import React, { useEffect } from 'react';\r\nimport ReactWebChat, { createDirectLine, createStyleSet, createStore } from 'botframework-webchat';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Icon } from \"@material-ui/core\";\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport ChatRatingComponent from './ChatRatingComponent'\r\nimport { showSnackbar } from './actions/snackbarActions'\r\nimport NotificationsSnackbar from './NotificaitonsSnackbar';\r\n\r\nconst ChatComponent = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    let { botId, systemName } = useParams();    \r\n    const [directLine, setDirectLine] = React.useState();\r\n    const [error, setError] = React.useState(false);\r\n    const [username, setUsername] = React.useState('');\r\n\r\n    const styleSet = createStyleSet({\r\n        bubbleBackground: '#ff000044',\r\n        bubbleFromUserBackground: '#0000ff44',\r\n        sendBoxButtonColor: '#D6002A',\r\n        sendBoxButtonColorOnFocus: '#D6002A',\r\n        sendBoxButtonColorOnHover: '#0078d7',\r\n        sendBoxBackground: '#ddd'\r\n    });\r\n\r\n    useEffect(async () => {\r\n        if (!directLine) {\r\n            try{\r\n\r\n            \r\n            const url = `${process.env.REACT_APP_API_BASE_URL}settings/ui/${botId ?? ''}/${systemName ?? ''}`;\r\n    \r\n            const res = await fetch(url,{\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'apiKey': 'Z%9Mkh710z-N+R.,82[LjbrIDast',\r\n                },\r\n                //  mode: \"opaque\",\r\n                credentials: 'include'\r\n            });\r\n        \r\n            const settings = await res.json();\r\n\r\n            if (settings.success) {\r\n                setUsername(settings.data.username);\r\n                setDirectLine(createDirectLine({ token: settings.data.botToken }));\r\n            } else {\r\n                \r\n                dispatch(showSnackbar(`Something\\'s gone wrong... [${settings.errorMessage}]`));\r\n                setError(true);\r\n            }\r\n        } catch(error){\r\n            console.log(\"opaque======\",error);\r\n        }\r\n\r\n    }      \r\n    },[]);\r\n\r\n    const activityMiddleware = () => next => (...setupArgs) => {\r\n        const [card] = setupArgs;\r\n\r\n        if (card.activity.from.role === 'bot' && card.activity.type === 'message') {\r\n            return (...renderArgs) => (\r\n                <ChatRatingComponent key={card.activity.id} botId={botId} activityId={card.activity.id}>\r\n                    {next(...setupArgs)(...renderArgs)}\r\n                </ChatRatingComponent>\r\n            );\r\n        }\r\n\r\n        return next(...setupArgs);\r\n    };\r\n\r\n    const store = createStore({}, ({ dispatch }) => next => action => {\r\n        if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {\r\n            dispatch({\r\n                type: 'WEB_CHAT/SEND_EVENT',\r\n                payload: {\r\n                    name: 'requestWelcomeDialog',\r\n                    value: {\r\n                    language: window.navigator.language\r\n                    }\r\n                }\r\n                });\r\n        }\r\n\r\n        return next(action);\r\n    });\r\n\r\n    return directLine \r\n    ? (\r\n        <div className='botContainer'>\r\n            <div className='botHeader'>Chat Winjit Test</div>\r\n            <ReactWebChat activityMiddleware={activityMiddleware} store={store} directLine={directLine} \r\n                styleSet={styleSet} username={username} />\r\n            <NotificationsSnackbar />\r\n        </div>\r\n    )\r\n    : (\r\n        error === true \r\n        ? (\r\n            <div className='botContainer'>\r\n                <div className='botHeader'>Chat</div>\r\n                <Icon className='errorIcon' style={{ fontSize: 40 }}>error</Icon>\r\n            </div>\r\n        )\r\n        : (\r\n            <div className='botContainer'>\r\n                <div className='botHeader'>Chat</div>\r\n                <img src='loading.gif' />\r\n            </div>\r\n        )        \r\n    );\r\n}\r\n\r\nexport default ChatComponent;","import './App.css';\r\nimport React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Redirect\r\n} from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk';\r\n\r\nimport uiReducer from './reducers/uiReducer'\r\nimport ChatComponent from './ChatComponent'\r\n\r\nconst App = () => {\r\n  const store = createStore(uiReducer, applyMiddleware(thunk));\r\n  console.log(\"process.env.PUBLIC_URL===\",process.env.PUBLIC_URL,process.env.REACT_APP_BASE_ROUTE_NAME);\r\n  return ( \r\n    // <>Welcome</>\r\n    <Provider store={store}>\r\n      <Router basename={`${process.env.PUBLIC_URL}/`}>\r\n        <Route path=\"/\" exact component={ChatComponent}>\r\n          <Redirect to={`${process.env.REACT_APP_BASE_ROUTE_NAME}/abbe-3A82323C8847F6C0CDB601D6F18B00EB`} />\r\n        </Route>\r\n        <Route path={`${process.env.REACT_APP_BASE_ROUTE_NAME}/:botId`} exact component={ChatComponent}/>\r\n        <Route path={`${process.env.REACT_APP_BASE_ROUTE_NAME}/:botId/:systemName`} exact component={ChatComponent}/>\r\n      </Router>\r\n    </Provider>\r\n  )\r\n};\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import 'core-js';\r\nimport 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}